from typing import List, Dict
import datetime
import asyncio

import aiogram.utils.exceptions
import aioschedule

from aiogram.types.chat import Chat

from classes.errors_reporter import MessageReporter
from config import bot, logger, KICK_RATE, HELP_RATE, HELPERS_CHAT
from kicker.get_channel_info import get_channel_data, get_helper_channel_data
from api.utils_schemas import UserModel

from classes.api_requests import UserAPI, AdminAPI


async def channel_kick_hackers(
        all_members: dict[int, dict], all_users: List[int], channel_id: str) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Ç–µ–ª–µ–≥—Ä–∞–º –∏–¥ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –±–∞–∑–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
    :param all_members: —Å–ª–æ–≤–∞—Ä—å —á–ª–µ–Ω–æ–≤ –∫–∞–Ω–∞–ª–∞ –≥–¥–µ –∫–ª—é—á telegram id
    –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—å —Å  –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    :param all_users:  —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –æ—Ç API
    :param channel_id: id –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π –±–æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç
    :return:
    """

    channel: Chat = await bot.get_chat(channel_id)
    admins = await channel.get_administrators()
    all_users.extend([user.user.id for user in admins])
    all_members_id: list[int] = list(all_members.keys())

    list_for_kicked = [
        member for member in all_members_id
        if member not in all_users
    ]
    if not list_for_kicked:
        logger.info(f' No users to delete')
        return

    logger.info('List users for kicked received.\n Starting delete users for channel')
    count = 0

    for telegram_id in list_for_kicked:
        try:
            await bot.kick_chat_member(chat_id=channel_id, user_id=telegram_id)
            await bot.unban_chat_member(chat_id=channel_id, user_id=telegram_id, only_if_banned=True)
            count += 1
        except aiogram.utils.exceptions.BadRequest as err:
            member: dict = all_members.get(telegram_id, {'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ'})
            text: str = '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n' + ''.join(
                [f'{key}: {value}\n'
                 for key, value in member.items()]
            )
            await MessageReporter.send_report_to_admins(text=text)
            logger.error(err)

    logger.info(
        f'Removed {count} users from the channel '
        f'\n list of telegram ids of kicked users: {list_for_kicked}')


async def kick_hackers() -> None:
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∏ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
     –∫–∞–∫ —á–ª–µ–Ω—ã –∫–ª—É–±–∞
    –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∫–∞–Ω–∞–ª–∞
    """

    logger.info(f'start kick_hackers: {datetime.datetime.utcnow()}')
    channels: list = await AdminAPI.get_channels()

    if not channels:
        logger.warning('scheduler_func.kick_hackers: No channel')
        await MessageReporter.send_report_to_admins('–ù–µ—Ç id –∫–∞–Ω–∞–ª–∞, –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å id –∫–∞–Ω–∞–ª–∞.\n'
                                                    ' –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π. \n/admin')
        return

    all_users_data: list[UserModel] = await AdminAPI.get_active_users()
    all_users: list[int] = [user.telegram_id for user in all_users_data]
    for channel_data in channels:
        chat_id = channel_data
        try:
            logger.info(f' try get_channel_data: {datetime.datetime.utcnow()}\nGet admins list')

            all_members: dict[int, dict] = await get_channel_data(str(chat_id)[4:])
            logger.info(f"users: {all_members}")
            if not all_members:
                logger.warning('no all members')
                await MessageReporter.send_report_to_admins(
                    '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∫–∞–Ω–∞–ª–∞, \n'
                    '–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —á—Ç–æ –±–æ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –∫–∞–Ω–∞–ª–µ –∏ \n'
                    '—è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º. \n'
                    '–ò–ª–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ –Ω–æ–≤—É—é –ª–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é\n'
                )
                return
            await channel_kick_hackers(
                all_members=all_members, all_users=all_users, channel_id=chat_id)

        except Exception as err:
            logger.error(f' channel name : {channel_data} {err}')
    logger.info(f' stop kick hackers: {datetime.datetime.utcnow()}')


async def get_updates_ticket() -> None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∞–ø–¥—ç–π—Ç—ã —á–∞—Ç–∞ –Ω–∞ –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã –ø–æ —Ç–∏–∫–µ—Ç–∞–º –∏ —Ä–∞—Å—Å—ã–ª–∫–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç–≤–µ—Ç—ã
    """

    logger.info(f'start get_updates_ticket: {datetime.datetime.utcnow()}')
    data = await get_helper_channel_data(HELPERS_CHAT)
    logger.info(f"–í —Ñ—É–Ω–∫—Ü–∏—é get_updates_ticket –ø–æ–ª—É—á–∏–ª —Å–ø–∏—Å–æ–∫: {data}")
    ticket, answer = data

    if ticket and answer:
        user_id = ticket.split(" | ")[1]
        text = "üéü –í–∞–º –ø—Ä–∏—à–µ–ª –æ—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–π —Ä–∞–Ω–µ–µ –≤–∞–º–∏ —Ç–∏–∫–µ—Ç.\n\n" \
               f"üìå–û—Ç–≤–µ—Ç: {answer}"

        await MessageReporter.send_message_to_user(text=text, telegram_id=user_id)


async def check_base():
    # aioschedule.every(KICK_RATE).minutes.do(kick_hackers)
    # aioschedule.every(HELP_RATE).minutes.do(get_updates_ticket)
    # aioschedule.every().day.at("9:00").do(mailing_to_members)
    while True:
        await aioschedule.run_pending()
        await asyncio.sleep(1)
