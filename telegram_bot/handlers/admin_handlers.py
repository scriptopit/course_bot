import loguru
import datetime

from config import bot, Dispatcher, settings
from aiogram.dispatcher.storage import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram.types import Message, CallbackQuery
from states.states import AdminState
from classes.api_requests import AdminAPI, UserAPI
from decorators.decorators import check_super_admin
from utils.utils import collect_data_and_send
from keyboards.keyboards import AdminButton, BaseMenu, \
    YesOrNo, ChatTags, UrlButton, StartMenu


@check_super_admin
async def admin_menu(message: Message) -> None:
    """ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ """

    await message.answer(
        text=f"–ê–¥–º–∏–Ω –º–µ–Ω—é:",
        reply_markup=AdminButton.keyboard()
    )


@check_super_admin
async def add_channel(message: Message) -> None:
    """ –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö """

    await AdminState.add_new_channel.set()
    await message.answer(
        text=f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å",
        reply_markup=BaseMenu.keyboard()
    )


@check_super_admin
async def get_channel_data(message: Message, state: FSMContext) -> None:
    """ –ü–æ–ª—É—á–∞–µ—Ç –ø—Ä–æ –∫–∞–Ω–∞–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö """

    await AdminState.processing.set()
    channel_id: int = message.forward_from_chat.id

    async with state.proxy() as data:
        data["channel_id"] = channel_id

    await message.answer(
        text=f"–ü–æ–ª—É—á–µ–Ω chat_id: {channel_id}\n"
             f"–í–µ—Ä–Ω–æ?",
        reply_markup=YesOrNo.keyboard()
    )


@check_super_admin
async def response_processing(message: Message, state: FSMContext) -> None:
    """ –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è """

    if message.text == YesOrNo.yes_button:
        await message.answer(
            text=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç—ç–≥ —á–∞—Ç–∞",
            reply_markup=ChatTags.keyboard()
        )
        await AdminState.receive_tag.set()

    else:
        await message.answer(
            text=f"–¢–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",
            reply_markup=AdminButton.keyboard()
        )
        await state.finish()


@check_super_admin
async def insert_chat_tag(message: Message, state: FSMContext) -> None:
    """ –ü–æ–ª—É—á–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç—ç–≥ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —è–≤–ª—è—Ç—å—Å—è –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞–Ω–∞–ª–∞ """

    async with state.proxy() as data:
        data['tag'] = message.text

        await message.answer(
            text=f"–í—ã –≤–≤–µ–ª–∏ –¥–∞–Ω–Ω—ã–µ:\n"
                 f"chat_id: {data['channel_id']}\n"
                 f"tag: {data['tag']}\n\n"
                 f"–í–µ—Ä–Ω–æ?",
            reply_markup=YesOrNo.keyboard()
        )

        await AdminState.check_data.set()


@check_super_admin
async def validate_data(message: Message, state: FSMContext) -> None:
    """ –ü–æ–ª—É—á–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å """

    data = await state.get_data()

    if message.text == YesOrNo.yes_button:
        response = await AdminAPI.add_channel(
            channel_id=data['channel_id'],
            tag=data['tag']
        )

        if response.status == 409:
            text: str = "–ö–∞–Ω–∞–ª —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–∫–æ–π —Ç–æ –∏–∑ —Ç–∞—Ä–∏—Ñ–æ–≤.\n" \
                           "–û—Ç–∫—Ä–µ–ø–∏—Ç–µ –µ–≥–æ –¥–ª—è –Ω–∞—á–∞–ª–∞"
        elif response.status == 200:
            text: str = f"–ö–∞–Ω–∞–ª {data['channel_id']} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ç–∞—Ä–∏—Ñ {data['tag'].upper()}"
        else:
            text = response

        await message.answer(
            text=text,
            reply_markup=AdminButton.keyboard()
        )

    else:
        await message.answer(
            text=f"–¢–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",
            reply_markup=AdminButton.keyboard()
        )
    await state.finish()


@check_super_admin
async def user_free_sub(message: Message) -> None:
    """ –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –º–∏–º–æ –∫–∞—Å—Å—ã """

    await message.answer(
        text=f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ –ë–î",
        reply_markup=BaseMenu.keyboard()
    )
    await AdminState.get_user_info.set()


@check_super_admin
async def info_user_filter(message: Message, state: FSMContext) -> None:
    """ –ü–æ–ª—É—á–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö """

    if not message.forward_from:
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f'–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö '
                 f'–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä '
                 f'"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π" –Ω–∞ "–í—Å–µ", –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
            reply_markup=BaseMenu.keyboard()
        )

    else:
        await message.answer(
            reply_markup=ChatTags.keyboard(),
            text=f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.forward_from.first_name}:"
                 f" {message.forward_from.id}.\n"
                 f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –æ–±—É—á–µ–Ω–∏—è –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –µ–º—É –≤—ã–¥–∞—Ç—å"
        )
        async with state.proxy() as data:
            data['user_id'] = message.forward_from.id
            data['username'] = message.forward_from.username

        await AdminState.choose_tag_user.set()


@check_super_admin
async def accumulate_data_and_send(message: Message, state: FSMContext) -> None:
    """ –°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–¥–∞—á–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î """

    if message.text in list(ChatTags.__dict__.values()):
        await message.answer(
            text=f"–ü–æ–ª—É—á–µ–Ω —Ç—ç–≥: {message.text}\n"
                 f"–ó–∞–ø–∏—Å—ã–≤–∞—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–æ–≤–æ–≥–æ —É—á–µ–Ω–∏–∫–∞",
            reply_markup=AdminButton.keyboard()
        )

        data = await state.get_data()
        response = await AdminAPI.activate_user(telegram_id=data['user_id'], tag=message.text)

        if response["status"] == 200:
            chat_id = await UserAPI.get_id_channel(tag=message.text)

            url = await bot.create_chat_invite_link(
                chat_id=str(chat_id.message),
                expire_date=datetime.datetime.now().replace(
                    microsecond=0) + datetime.timedelta(hours=12),
                member_limit=1
            )

            await bot.send_message(
                text=f"üéÅ –í–∞–º –≤—ã–¥–∞–ª–∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–∞—Ä–∏—Ñ—É {message.text.upper()}\n"
                     f"–ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è!",
                chat_id=data['user_id'],
                reply_markup=UrlButton.keyboard(url=url.invite_link)
            )

        else:
            await message.answer(
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –æ–Ω –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–ø–∏—Å–∞—Ç—å /start",
                reply_markup=AdminButton.keyboard()
            )

    else:
        await message.answer(
            text=f"–í—ã –≤–≤–µ–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç—ç–≥: {message.text}\n"
                 f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ",
            reply_markup=AdminButton.keyboard()
        )
    await state.finish()


@check_super_admin
async def deactivate_user_handle(message: Message) -> None:
    """ –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ö—ç–Ω–¥–ª–µ—Ä –Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å—Ç–∞–≤–∏—Ç –≤ —Å—Ç—ç–π—Ç """

    await message.answer(
        text=f"–ü–µ—Ä–µ—à–ª–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤ –ë–î",
        reply_markup=BaseMenu.keyboard()
    )
    await AdminState.deactivate_user.set()


@check_super_admin
async def deactivate_sub(message: Message, state: FSMContext):
    """ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏ """

    if not message.forward_from:
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f'–ü–æ–ø—Ä–æ—Å–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö '
                 f'–∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä '
                 f'"–ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π" –Ω–∞ "–í—Å–µ", –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
            reply_markup=BaseMenu.keyboard()
        )

    else:
        await message.answer(
            reply_markup=AdminButton.keyboard(),
            text=f"–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.last_name}:"
                 f" {message.from_user.id}.\n"
                 f"–°–µ–π—á–∞—Å –æ–Ω –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!",
        )

        response = await AdminAPI.deactivate_user(telegram_id=message.from_user.id)

        if response["status"] == 200:
            await message.answer(
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} —É—Å–ø–µ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω\n"
                     f"–û–Ω –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω —Å –∫–∞–Ω–∞–ª–∞ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 10 –º–∏–Ω—É—Ç",
                reply_markup=AdminButton.keyboard()
            )
        else:
            await message.answer(
                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞–∂–∞—Ç—å /start"
            )
        await state.finish()


@check_super_admin
async def get_active_users_handler(message: Message) -> None:
    """ –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' """

    result = await AdminAPI.get_active_users()
    if result:
        loguru.logger.info(f"–ü—Ä–∏—à–ª–æ —Å DB: {result}")
        await collect_data_and_send(data=result, message=message)
    else:
        await message.answer(
            text=f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=AdminButton.keyboard()
        )


@check_super_admin
async def get_service_users(message: Message) -> None:
    """ –†–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –∫–Ω–æ–ø–∫—É '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' """

    result = await AdminAPI.get_all_users()
    if result:
        await collect_data_and_send(message=message, data=result)
    else:
        await message.answer(
            text=f"–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            reply_markup=AdminButton.keyboard()
        )


def register_admin_handlers(dp: Dispatcher) -> None:
    """ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–¥–º–∏–Ω-—Ö—ç–Ω–¥–ª–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è """

    dp.register_message_handler(
        admin_menu, commands=["admin"], state=None)
    dp.register_message_handler(
        add_channel, Text(equals=AdminButton.add_channel))
    dp.register_message_handler(
        get_channel_data, state=AdminState.add_new_channel)
    dp.register_message_handler(
        response_processing, state=AdminState.processing)
    dp.register_message_handler(
        insert_chat_tag, state=AdminState.receive_tag)
    dp.register_message_handler(
        validate_data, state=AdminState.check_data)
    dp.register_message_handler(
        user_free_sub, Text(equals=AdminButton.add_sub), state=None)
    dp.register_message_handler(
        info_user_filter, state=AdminState.get_user_info)
    dp.register_message_handler(
        accumulate_data_and_send, state=AdminState.choose_tag_user)
    dp.register_message_handler(
        deactivate_user_handle, Text(equals=AdminButton.take_sub), state=None)
    dp.register_message_handler(
        deactivate_sub, state=AdminState.deactivate_user)
    dp.register_message_handler(
        get_active_users_handler, Text(equals=AdminButton.active_subs))
    dp.register_message_handler(
        get_service_users, Text(equals=AdminButton.all_users))

