import datetime
import time
import loguru

from config import bot, Dispatcher, HELPERS_CHAT
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from keyboards.keyboards import StartMenu, SubsMenu, \
    PayButton, UrlButton, YesOrNo, BaseMenu, StudentButtons
from aiogram.dispatcher.filters import Text
from states.states import SubscriptionState, TicketStates
from aiogram.dispatcher.storage import FSMContext
from classes.api_requests import UserAPI, AdminAPI
from utils.utils import write_to_storage, developer_photo
from api.utils_schemas import DataStructure
from messages.main_message import *
from decorators.decorators import private_message


@private_message
async def main_menu(message: Message) -> None:
    await UserAPI.create_user(
        telegram_id=message.from_user.id, nick_name=message.from_user.username)

    await message.answer(
        text=f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=StartMenu.keyboard()
    )

@private_message
async def buy_subscription_packet(message: Message, state: FSMContext) -> None:
    """ –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ """

    async with state.proxy() as data:
        data["telegram_id"] = message.from_user.id
        data["username"] = message.from_user.username

    for text in (sub_text, base_packet, pro_packet, vip_packet):
        await message.answer(
            text=text,
            reply_markup=SubsMenu.keyboard(),
            parse_mode="Markdown"
        )
    await SubscriptionState.choose_sub_packet.set()


@private_message
async def choose_sub_packet(message: Message, state: FSMContext) -> None:
    """ –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∏ """

    async with state.proxy() as data:
        data["packet"] = message.text
        data["telegram_id"] = message.from_user.id
        data["tag"] = message.text.split(" ")[-1].lower()

    if message.text == SubsMenu.base_packet:

        link = await UserAPI.buy_subscription(
            packet="base", telegram_id=message.from_user.id,
            username=message.from_user.username, price=99)
        await write_to_storage(
            state=state, url=link, packet=base_packet_price_menu, tag="base")

        if link:
            await message.answer(
                text=base_packet_price_menu,
                parse_mode="Markdown",
                reply_markup=PayButton.keyboard(url=link)
            )

    elif message.text == SubsMenu.pro_packet:
        link = await UserAPI.buy_subscription(
            packet="pro", telegram_id=message.from_user.id,
            username=message.from_user.username, price=179)
        await write_to_storage(
            state=state, url=link, packet=pro_packet_price_menu, tag="pro")

        await message.answer(
            text=pro_packet_price_menu,
            parse_mode="Markdown",
            reply_markup=PayButton.keyboard(url=link)
        )
    elif message.text == SubsMenu.vip_packet:
        link = await UserAPI.buy_subscription(
            packet="vip", telegram_id=message.from_user.id,
            username=message.from_user.username, price=269)
        await write_to_storage(
            state=state, url=link, packet=vip_packet_price_menu, tag="vip")

        await message.answer(
            text=vip_packet_price_menu,
            parse_mode="Markdown",
            reply_markup=PayButton.keyboard(url=link)
        )
    else:
        await message.answer(
            text=f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ.\n"
                 f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑",
            reply_markup=StartMenu.keyboard(),
            parse_mode="Markdown"
        )
        await state.finish()


async def payment_callback(callback: CallbackQuery, state: FSMContext) -> None:
    """ –õ–æ–≤–∏—Ç callback check_payment –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–µ–≥–æ """

    if callback.data == "check_payment":

        await callback.message.delete()
        data = await state.get_data()
        message_data: Message = await callback.message.answer(
            "‚åõ –ü–æ–ª—É—á–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —Å—Ç–∞—Ç—É—Å—É –≤–∞—à–µ–≥–æ –∏–Ω–≤–æ–π—Å–∞...",
            reply_markup=ReplyKeyboardRemove())
        telegram_id: int = int(callback.from_user.id)
        loguru.logger.info(f"–í–æ –≤—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {telegram_id}")
        subscribe_data: DataStructure = await UserAPI.check_payment(
            telegram_id=telegram_id, tag=data["tag"])

        if not subscribe_data:
            await callback.message.answer(
                "–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.",
                reply_markup=StartMenu.keyboard())
            await state.finish()
            return

        await message_data.delete()

        if subscribe_data.status != 200:
            await callback.message.answer(
                text=data["packet"],
                reply_markup=PayButton.keyboard(url=data['url']),
                parse_mode="Markdown"
            )
        else:
            chat_id = await UserAPI.get_id_channel(tag=data['tag'])

            url = await bot.create_chat_invite_link(
                chat_id=chat_id.message,
                expire_date=datetime.datetime.now().replace(
                    microsecond=0) + datetime.timedelta(hours=12),
                member_limit=1
            )

            await callback.message.answer(
                text=f"üéÅ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É, "
                     f"–≤–æ—Ç –≤–∞—à–∞ –ª–∏—á–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É —Å –º–µ–Ω—Ç–æ—Ä–æ–º.\n",
                reply_markup=UrlButton.keyboard(url=url.invite_link)
            )
            await state.finish()

    elif callback.data == "cancel":

        await state.finish()
        await callback.message.delete()
        await callback.message.answer(
            text=f"–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞",
            reply_markup=StartMenu.keyboard()
        )

    await callback.answer()


@private_message
async def cancel_handler(message: Message, state: FSMContext) -> None:
    current_state = await state.get_state()
    await message.reply(
        text=f"–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞", reply_markup=StartMenu.keyboard())
    if current_state is None:
        return
    await state.finish()


@private_message
async def callback_cancel(callback: CallbackQuery, state: FSMContext) -> None:
    """ –û—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ CALLBACK –∫–Ω–æ–ø–∫–∏ CANCEL """

    current_state = await state.get_state()
    if current_state is not None:
        await state.finish()

    await callback.message.answer(
        text=f"–£—Å–ø–µ—à–Ω–∞—è –æ—Ç–º–µ–Ω–∞",
        reply_markup=StartMenu.keyboard()
    )

    await callback.answer()


@private_message
async def info_about(message: Message) -> None:
    """ –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é –º–µ–Ω—Ç–æ—Ä-—Å–µ—Ä–≤–∏—Å–∞ """

    await bot.send_photo(
        photo=await developer_photo(),
        caption='üìá Instagram: [iTDeal Group](https://www.instagram.com/itdealgroup/)'
                '\nüë®‚Äçüíª Telegram Channel: [Pythonic Bytes](t.me/pybytes)'
                '\nüë®‚Äçüíª Telegram Chat: [PyBytes Chat](t.me/pybytes_chat)'
                '\nüë®‚Äçüíª Telegram: [A B BOT Ô£ø](t.me/lunasantrope)',
        chat_id=message.from_user.id,
        parse_mode='Markdown',
        reply_markup=StartMenu.keyboard()
    )


@private_message
async def support_menu(message: Message) -> None:
    """ –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ø–æ–¥–¥–µ—Ä–∂–∫–∞' """

    await message.answer(
        text=f'–í—ã –∂–µ–ª–∞–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–∫–µ—Ç –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏?',
        reply_markup=YesOrNo.keyboard()
    )

    await TicketStates.open_ticket.set()


@private_message
async def ticket_create_helper(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∏–∫–∫–µ—Ç–∞ –≤ —Å—Ç—ç–π—Ç–µ
    """

    if message.text == YesOrNo.yes_button:
        await message.answer(
            text=f"üí° –û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –≤–∞—à–µ–π –ø—Ä–æ–±–ª–µ–º—ã –ª–∏–±–æ –≤–æ–ø—Ä–æ—Å.\n"
                 f"üíº –ù–∞—à–∏ —Ö–µ–ª–ø–µ—Ä—ã —Å–≤—è–∂—É—Ç—Å—è —Å –≤–∞–º–∏ –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                 f""
                 f"\n–ï—Å–ª–∏ –≤—ã –ø–µ—Ä–µ–¥—É–º–∞–ª–∏ - –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É \"–û—Ç–º–µ–Ω–∞\"",
            reply_markup=BaseMenu.keyboard()
        )

        await TicketStates.input_ticket_info.set()

    else:
        await state.finish()
        await message.answer(
            text=f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=StartMenu.keyboard()
        )


@private_message
async def get_ticket_data_from_user(message: Message, state: FSMContext) -> None:
    """
    –ó–∞–±–∏—Ä–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–∫–µ—Ç–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ—Ö–æ–¥–∏—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    """

    if len(message.text) < 3500:

        async with state.proxy() as data:
            data["username"] = message.from_user.username
            data["first_name"] = message.from_user.first_name
            data["last_name"] = message.from_user.last_name
            data["created_at"] = datetime.datetime.now().replace(microsecond=0)
            data["text"] = message.text
            data["user_id"] = message.from_user.id

            await message.answer(
                text=f"–¢–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω, "
                     f"–ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n"
                     f"\n–í–∞—à username: {message.from_user.username}"
                     f"\n–í–∞—à–µ –∏–º—è: {message.from_user.first_name} "
                     f"{'' if data['last_name'] is None else data['last_name']}"
                     f"\n–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {datetime.datetime.now().replace(microsecond=0)}"
                     f"\n\n*–¢–µ–∫—Å—Ç: {message.text}*"
                     f"\n\n\n"
                     f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∏–∫–µ—Ç?",
                reply_markup=YesOrNo.keyboard(),
                parse_mode="Markdown"
            )
            await TicketStates.accept_ticket.set()
    else:
        await bot.send_message(
            chat_id=message.from_user.id,
            text=f"–í—ã –≤–≤–µ–ª–∏ —Ç–µ–∫—Å—Ç –ø—Ä–µ–≤—ã—à–∞—é—â–∏–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ!\n"
                 f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —Å–∏–º–≤–æ–ª–æ–≤: 3500 —Å–∏–º–≤–æ–ª–æ–≤\n"
                 f"–í—ã –≤–≤–µ–ª–∏: {len(message.text)}",
            reply_markup=StartMenu.keyboard()
        )
        await state.finish()


@private_message
async def accept_ticket_or_decline(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–±—ç–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
    """

    if message.text == YesOrNo.yes_button:
        async with state.proxy() as data:

            text = f"üìå –ù–û–í–´–ô –¢–ò–ö–ï–¢ üìå\n\n" \
                   f"ID: | {data['user_id']} | \n" \
                   f"Username: {data['username']}" \
                   f"\n–ò–º—è: {data['first_name']}\n" \
                   f"–§–∞–º–∏–ª–∏—è: {data['last_name']}\n" \
                   f"–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: {data['created_at']}\n" \
                   f"\n\n" \
                   f"{data['text']}"

            if len(text) > 4096:
                for x in range(0, len(text), 4096):
                    await bot.send_message(chat_id=int(HELPERS_CHAT), text=text[x:x + 4096])
            else:
                await bot.send_message(chat_id=int(HELPERS_CHAT), text=text)

            await bot.send_message(
                chat_id=message.from_user.id,
                text=f"–í–∞—à —Ç–∏–∫–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n"
                     f"–í—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ —Ö–µ–ª–ø–µ—Ä–∞",
                reply_markup=StartMenu.keyboard()
            )

    else:
        await message.answer(
            text=f"–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            reply_markup=StartMenu.keyboard()
        )
    await state.finish()


@private_message
async def knowledge_menu(message: Message) -> None:
    """ –ú–µ–Ω—é —É—á–µ–Ω–∏–∫–∞ —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π """

    user_models = await AdminAPI.get_active_users()
    clear_users = [user.telegram_id for user in user_models]

    if message.from_user.id in clear_users:
        await message.answer(
            text=f"–ü–µ—Ä–µ–¥ –≤–∞–º–∏ –º–µ–Ω—é –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞–ª–∞",
            reply_markup=StudentButtons.keyboard()
        )
    else:
        await message.answer(
            text=f"üêç –≠—Ç–æ –º–µ–Ω—é –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ —Å–µ—Ä–≤–∏—Å–∞\n"
                 f"üêç –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –ø–æ–¥–ø–∏—Å–∫—É!",
            reply_markup=StartMenu.keyboard()
        )


@private_message
async def my_academy_stats(message: Message) -> None:
    """ –í—ã–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –µ–≥–æ –æ–±—É—á–µ–Ω–∏—é """

    module_id = await UserAPI.get_module_id(telegram_id=message.from_user.id)

    await message.answer(
        text=f"üé© –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ {module_id} –∏–∑ 30 –º–æ–¥—É–ª–µ–π\n"
             f"üí° –î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞: –ù–µ —Å–¥–∞–Ω–∞",
        reply_markup=StudentButtons.keyboard()
    )


@private_message
async def homework_menu(message: Message) -> None:
    """ –ú–µ–Ω—é —Å–¥–∞—á–∏ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã """

    await message.answer(
        text=f"COMING SOON\n\n"
             f"–°–¥–∞–≤–∞–π –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É!",
        reply_markup=StudentButtons.keyboard()
    )


@private_message
async def get_next_lesson(message: Message) -> None:
    """ –û—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª—è –≤—ã–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–æ–≤–æ–≥–æ —É—á–µ–±–Ω–æ–≥–æ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ """

    links = await UserAPI.get_current_module(telegram_id=message.from_user.id)

    if links:
        await message.answer(
            text=f"üêç –í–æ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–∞—Ç–µ—Ä–∏–∞–ª –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è\n"
                 f"–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–¥–∞–π—Ç–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É\n\n"
                 f"{links}",
            reply_markup=StudentButtons.keyboard()
        )
    else:
        await message.answer(
            text=f"üêç –í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ —É—á–∏—Ç—å—Å—è –≤ –Ω–∞—à–µ–π –∞–∫–∞–¥–µ–º–∏–∏, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ",
            reply_markup=StartMenu.keyboard()
        )

#
# async def del_keyboard(message: Message):
#     await message.reply(
#         text=f"–£–¥–∞–ª–µ–Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞",
#         reply_markup=ReplyKeyboardRemove()
#     )


def register_main_handlers(dp: Dispatcher) -> None:
    """ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç MAIN —Ö—ç–Ω–¥–ª–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è """

    # dp.register_message_handler(
    #     del_keyboard, commands=['/del'])
    dp.register_message_handler(
        cancel_handler, Text(equals="–û—Ç–º–µ–Ω–∞" or "–æ—Ç–º–µ–Ω–∞"), state=["*"])
    dp.register_message_handler(
        main_menu, commands=["start"], state=None)
    dp.register_message_handler(
        buy_subscription_packet, Text(equals=StartMenu.buy_subscription))
    dp.register_message_handler(
        choose_sub_packet, Text(contains="Python"), state=SubscriptionState.choose_sub_packet)
    dp.register_callback_query_handler(
        payment_callback, state=SubscriptionState.choose_sub_packet)
    dp.register_message_handler(
        info_about, Text(equals=StartMenu.information), state=None)
    dp.register_message_handler(
        support_menu, Text(equals=StartMenu.support), state=None)
    dp.register_message_handler(
        ticket_create_helper, state=TicketStates.open_ticket)
    dp.register_message_handler(
        get_ticket_data_from_user, state=TicketStates.input_ticket_info)
    dp.register_message_handler(
        accept_ticket_or_decline, state=TicketStates.accept_ticket)
    dp.register_message_handler(
        knowledge_menu, Text(equals=StartMenu.student_menu))
    dp.register_message_handler(
        my_academy_stats, Text(equals=StudentButtons.my_academy))
    dp.register_message_handler(
        homework_menu, Text(equals=StudentButtons.submit_homework))
    dp.register_message_handler(
        get_next_lesson, Text(equals=StudentButtons.next_module))

